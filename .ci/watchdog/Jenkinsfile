// INTEL CONFIDENTIAL
// Copyright 2018 Intel Corporation All Rights Reserved.
// The source code contained or described herein and all documents related to the
// source code ("Material") are owned by Intel Corporation or its suppliers or
// licensors. Title to the Material remains with Intel Corporation or its
// suppliers and licensors. The Material may contain trade secrets and proprietary
// and confidential information of Intel Corporation and its suppliers and
// licensors, and is protected by worldwide copyright and trade secret laws and
// treaty provisions. No part of the Material may be used, copied, reproduced,
// modified, published, uploaded, posted, transmitted, distributed, or disclosed
// in any way without Intel's prior express written permission.
// No license under any patent, copyright, trade secret or other intellectual
// property right is granted to or conferred upon you by disclosure or delivery of
// the Materials, either expressly, by implication, inducement, estoppel or
// otherwise. Any license under such intellectual property rights must be express
// and approved by Intel in writing.
// Include any supplier copyright notices as supplier requires Intel to use.
// Include supplier trademarks or logos as supplier requires Intel to use,
// preceded by an asterisk. An asterisked footnote can be added as follows:
// *Third Party trademarks are the property of their respective owners.
// Unless otherwise agreed by Intel in writing, you may not remove or alter
// this notice or any other notice embedded in Materials by Intel or Intel's
// suppliers or licensors in any way.

node(LABEL) {
    try {
            BUILD_WORKSPACE="$WORKSPACE/$BUILD_NUMBER"
            stage("Clone repository") {
                dir ("$BUILD_WORKSPACE") {
                    checkout([$class: 'GitSCM', branches: [[name: "*/$BRANCH"]], 
                            doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', timeout: 30]],  submoduleCfg: [],
                            userRemoteConfigs: [[credentialsId: '6887a177-8c4d-4fe9-9c3b-fcd71b22bfba', url: 'git@github.com:NervanaSystems/ngraph-onnx.git']]])
                }
            }
            stage("Prepare environment") {
                dir ("$BUILD_WORKSPACE") {
                    sh """#!/bin/bash
                        virtualenv -p python3 venv
                        source venv/bin/activate
                        pip install python-jenkins \
                                    retrying \
                                    pygithub \
                                    slackclient 
                    """
                }
            }
            stage("Run script") {
                dir ("$BUILD_WORKSPACE") {
                    sh """#!/bin/bash
                        source venv/bin/activate
                        export PYTHONHTTPSVERIFY=0
                        python .ci/watchdog/Main.py \
                            --slack-token=${SLACK_TOKEN_FILE} \
                            --github-token=${GITHUB_TOKEN_FILE} \
                            --github-org=${GITHUB_ORG} \
                            --github-project=${GITHUB_PROJECT} \
                            --jenkins-token=${JENKINS_TOKEN_FILE} \
                            --jenkins-server=${JENKINS_SERVER} \
                            --jenkins-user=${JENKINS_USER} \
                            --ci-job=${CI_JOB_NAME} \
                            --watchdog-job=${WATCHDOG_JOB_NAME}
                    """
                }
            }
            stage("Cleanup") {
                sh """
                    cd $BUILD_WORKSPACE
                    rm -rf ..?* .[!.]* *
                """
            }

    } catch (e) {
        echo "$e"
        currentBuild.result = "FAILURE"
    } finally {
        deleteDir()
    }
}
